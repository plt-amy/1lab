// Styling for source code, both Agda-specific and generic

@import "vars.scss";
@import "mixins.scss";


@font-face {
  font-family: 'Julia Mono';
  font-display: swap;
  font-weight: 400;
  font-stretch: normal;
  font-style: normal;
  src: url('../static/ttf/julia-mono.ttf') format('truetype');
}

code, pre, .sourceCode {
  font-family: 'Julia Mono';
  font-size: var(--code-font-size);
  font-weight: 500;
}

div.sourceCode {
  @include material(var(--code-bg));
}

div.sourceCode > pre {
  background-color: var(--code-bg);
  color:            var(--code-fg);

  flex-grow: 0;

  overflow-x: auto;
  line-height: 1.2;

  code {
    display: block;
  }

  > pre {
    padding: unset;
    margin-top: unset;
    margin-bottom: unset;
    box-shadow: unset;

    margin: 0;

    overflow-y: clip;
  }
}

pre.Agda {
  box-shadow: none;
  overflow-x: auto;
  overflow-y: clip;

  // The margin should be 1rem (the width of the padding for paragraphs
  // with borders) *plus* 5px. This was measured empirically.
  margin: 0.25rem calc(1rem + 5px) 0.25rem calc(1rem + 5px);

  background-color: var(--code-bg);
  color:            var(--code-fg);
}

@keyframes highlight {
  0% {
    background-color: var(--code-highlight);
  }
  100% {
    background-color: var(--code-bg);
  }
}

a[href].hover-highlight {
  background-color: var(--code-highlight);
  isolation: isolate;
}

/* Aspects. */
.Agda {
  .Comment       { color: var(--code-fg); font-style: italic; }
  .Background    { background-color: var(--code-bg); }
  .Markup        { color: var(--code-fg); }
  .Keyword       { color: var(--code-keyword); }
  .String        { color: var(--code-string); }
  .Number        { color: var(--code-number); }
  .Symbol        { color: var(--code-fg); }
  .PrimitiveType { color: var(--primary); }
  .Pragma        { color: var(--code-fg); }

/* NameKinds. */
  .Bound                  { color: var(--code-fg) !important;      }
  .Generalizable          { color: var(--code-fg) !important;      }
  .InductiveConstructor   { color: var(--code-constructor) !important;   }
  .CoinductiveConstructor { color: var(--code-constructor) !important;   }
  .Datatype               { color: var(--primary) !important;    }
  .Field                  { color: var(--code-field) !important;  }
  .Function               { color: var(--primary) !important;    }
  .Module                 { color: var(--code-module) !important;    }
  .Postulate              { color: var(--primary) !important;    }
  .Primitive              { color: var(--primary) !important;    }
  .Record                 { color: var(--primary) !important;    }

/* OtherAspects. */
  .UnsolvedMeta         { color: var(--code-fg); background: yellow         }
  .UnsolvedConstraint   { color: var(--code-fg); background: yellow         }
  .TerminationProblem   { color: var(--code-fg); background: #FFA07A        }
  .IncompletePattern    { color: var(--code-fg); background: #F5DEB3        }
  .Error                { color: red;   text-decoration: underline }
  .TypeChecks           { color: var(--code-fg); background: #ADD8E6        }
  .ShadowingInTelescope { color: var(--code-fg); background: #808080        }
  .Deadcode             {
    color: var(--code-keyword);
    font-weight: bold;
  }

  /* Standard attributes. */
  a { text-decoration: none }
  a[href]:hover {
    text-decoration: 2px var(--primary) underline;
  }
  a[href]:target {
    animation: highlight 2.5s;
  }

  // background-color: $code-bg;
  @include monospaced;
  font-weight: 400;

  font-size: initial;
  body.text-page & {
    font-size: var(--code-font-size);
  }
}

// Styles for code
code.kw, span.kw { color: var(--code-keyword); } /* Keyword */
code.dt, span.dt { color: var(--primary); } /* DataType */
code.dv, span.dv { color: var(--code-number); } /* DecVal */
code.bn, span.bn { color: var(--code-number); } /* BaseN */
code.fl, span.fl { color: var(--code-number); } /* Float */
code.ch, span.ch { color: var(--code-string); } /* Char */
code.st, span.st { color: var(--code-string); } /* String */
code.co, span.co { color: var(--code-fg); font-style: italic; } /* Comment */
code.ot, span.ot { color: var(--code-constructor); } /* Other */
code.al, span.al { color: #ff0000; } /* Alert */
code.fu, span.fu { color: var(--code-fg); } /* Function */
code.er, span.er { color: #ff0000; } /* Error */
code.wa, span.wa { color: #60a0b0; } /* Warning */
code.cn, span.cn { color: var(--code-keyword); } /* Constant */
code.sc, span.sc { color: var(--coded-keyword); } /* SpecialChar */
code.vs, span.vs { color: var(--primary); } /* VerbatimString */
code.ss, span.ss { color: var(--code-string); } /* SpecialString */
code.va, span.va { color: var(--code-fg); } /* Variable */
code.cf, span.cf { color: var(--code-keyword); } /* ControlFlow */
code.op, span.op { color: var(--code-constructor); } /* Operator */
code.pp, span.pp { color: var(--code-constructor); } /* Preprocessor */
code.at, span.at { color: var(--code-constructor); } /* Attribute */
code.do, span.do { color: var(--code-string); } /* Documentation */
code.an, span.an { color: var(--code-string); } /* Annotation */
code.cv, span.cv { color: var(--code-string); } /* CommentVar */

.type-tooltip {
  position: absolute;
  z-index: 100;

  font-size: 0.8em;
  color: var(--code-fg);
  background: var(--code-bg);

  &.sourceCode {
    padding: 0.3em;
    border:  0;
  };

  box-shadow: 2px 2px 6px var(--shadow);
}
